//https://practice.geeksforgeeks.org/problems/shortest-common-supersequence/0

// This question is a little variation of the problem LCS
// In the worst case where there is no common subsequence between two strings 
// the length of the supersequence would be n+m
// subtract the common subsequence to get the length of the shortest supersequence

#include <bits/stdc++.h>
using namespace std;
const int MAX = 101;
int dp[MAX][MAX];

int lcs(string s1,string s2,int n,int m){
    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0 || j==0){
                dp[i][j] = 0;
                continue;
            }
            else if(s1[i-1]==s2[j-1]){
                dp[i][j] = dp[i-1][j-1]+1;
            }
            else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[n][m];
}
int main() {
	int t; cin >> t;
	while(t--){
	    string s1,s2; cin >> s1 >> s2;
	    memset(dp,-1,sizeof(dp));
	    int n = s1.length();
	    int m = s2.length();
	    cout << n+m-lcs(s1,s2,n,m) << endl;
	}
	return 0;
}
